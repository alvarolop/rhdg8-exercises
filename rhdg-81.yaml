apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: rhdg8-operator
  annotations:
    description: Template to deploy a RHDG operator on OCP.
    tags: infinispan,datagrid,operator
    iconClass: icon-datagrid
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
objects:
# - apiVersion: project.openshift.io/v1
#   kind: Project
#   metadata:
#     name: ${CLUSTER_NAMESPACE}
#     annotations:
#       openshift.io/description: "This project contains all the clusters deployed of Red Hat Data Grid 8"
#       openshift.io/display-name: "RH Data Grid 8"
- apiVersion: operators.coreos.com/v1
  kind: OperatorGroup
  metadata:
    name: datagrid
    namespace: ${CLUSTER_NAMESPACE}
  spec:
    targetNamespaces:
      - ${CLUSTER_NAMESPACE}
- apiVersion: operators.coreos.com/v1alpha1
  kind: Subscription
  metadata:
    name: datagrid-operator
    namespace: ${CLUSTER_NAMESPACE}
  spec:
    channel: 8.1.x
    installPlanApproval: Automatic 
    name: datagrid
    source: redhat-operators
    sourceNamespace: openshift-marketplace
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${CLUSTER_NAME}-credentials
    namespace: ${CLUSTER_NAMESPACE}
  labels:
    type: middleware
  type: Opaque 
  stringData: 
    identities.yaml: |-     
      credentials:
      - username: developer
        password: developer
      - username: operator
        password: ${OPERATOR_PASSWORD}
      - username: prometheus
        password: ${PROMETHEUS_PASSWORD}
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${CLUSTER_NAME}-caches-credentials
    namespace: ${CLUSTER_NAMESPACE}
  labels:
    type: middleware
  type: Opaque 
  stringData:
    username: operator
    password: ${OPERATOR_PASSWORD}
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${CLUSTER_NAME}-monitoring-credentials
    namespace: ${CLUSTER_NAMESPACE}
  labels:
    type: middleware
  type: Opaque 
  stringData:
    username: prometheus
    password: ${PROMETHEUS_PASSWORD}
- apiVersion: infinispan.org/v1
  kind: Infinispan
  metadata:
    name: ${CLUSTER_NAME}
    namespace: ${CLUSTER_NAMESPACE}
    labels:
      type: middleware
  spec:
    # affinity:
    #   nodeAffinity:
    #     preferredDuringSchedulingIgnoredDuringExecution:
    #       - preference:
    #         weight:
    #     requiredDuringSchedulingIgnoredDuringExecution: 
    #       nodeSelectorTerms:
    #         - matchExpressions:
    #           matchFields:
    #   podAffinity:
    #     preferredDuringSchedulingIgnoredDuringExecution:
    #       - podAffinityTerm:
    #         weight:
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #       - labelSelector:
    #         namespaces:
    #         topologyKey:
    #   podAntiAffinity:
    #     preferredDuringSchedulingIgnoredDuringExecution:
    #       - podAffinityTerm:
    #         weight:
    #     requiredDuringSchedulingIgnoredDuringExecution:
    #       - labelSelector:
    #         namespaces:
    #         topologyKey:
    # autoscale:
    #   disabled:
    #   maxMemUsagePercent:
    #   maxReplicas:
    #   minMemUsagePercent:
    #   minReplicas:
    container:
      cpu: '2'
      extraJvmOpts: '-Xlog:gc*=info:file=/tmp/gc.log:time,level,tags,uptimemillis:filecount=10,filesize=1m
              -XX:-UseParallelOldGC -XX:+UseG1GC -XX:MaxGCPauseMillis=400'
      memory: 3Gi
    expose: 
      annotations: {}
      # host:
      # nodePort:
      type: Route
    # image: "infinispan/server:12.0"
    logging:
      categories: {}
      # categories:
      #   org.infinispan: debug
      #   org.jgroups: debug
    replicas: 3
    security:
      endpointEncryption:
        # certSecretName:
        # certServiceName:
        type: None
      endpointSecretName: ${CLUSTER_NAME}-credentials
    service:
      # container:
      #   ephemeralStorage:
      #   storage: ''
      #   storageClassName:
      # replicationFactor: 2
      # sites:
      #   local:
      #     expose:
      #       annotations: {}
      #       host:
      #       nodePort:
      #       type:
      #     name:
      #   locations:
      #     - host:
      #       name:
      #       port:
      #       secretName:
      #       url:
      type: DataGrid
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    labels:
      k8s-app: prometheus
      jirakey: one
    name: datagrid-${CLUSTER_NAME}-monitoring
    namespace: ${CLUSTER_NAMESPACE}
  spec:
    endpoints:
      - targetPort: 11222 
        path: /metrics 
        honorLabels: true
        basicAuth:
          username:
            key: username
            name: ${CLUSTER_NAME}-monitoring-credentials
          password:
            key: password
            name: ${CLUSTER_NAME}-monitoring-credentials
        interval: 30s
        scrapeTimeout: 10s
        scheme: http 
    namespaceSelector:
      matchNames:
        - ${CLUSTER_NAMESPACE} 
    selector:
      matchLabels:
        app: infinispan-service
        clusterName: ${CLUSTER_NAME}
    targetLabels:
      - clusterName
parameters:
- name: CLUSTER_NAMESPACE
  description: "The project where the RHDG cluster will be installed."
  required: true
- name: CLUSTER_NAME
  description: "The name of the RHDG cluster."
  required: false
  value: "rhdg"
- name: PROMETHEUS_PASSWORD
  description: "Password used by Prometheus to obtain metrics from /metrics."
  required: true
  from: '[a-zA-Z0-9]{20}'
  generate: expression
- name: OPERATOR_PASSWORD
  description: "Password used by the Operator to create caches."
  required: true
  from: '[a-zA-Z0-9]{20}'
  generate: expression